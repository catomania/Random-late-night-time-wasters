http://www.learndatasci.com/free-books/

http://www.git-scm.com/book/en/v2
https://www.atlassian.com/git/tutorials/setting-up-a-repository

https://growsdk.org/start/

http://www.rafekettler.com/magicmethods.html

http://eagain.net/articles/git-for-computer-scientists/

http://www.roguelynn.com/pages/

http://kelukelu.me/writing/wordreplace.html

http://python-textbok.readthedocs.org/en/latest/Sorting_and_Searching_Algorithms.html

http://geekly-yours.blogspot.com/2014/03/dijkstra-algorithm-python-example-source-code-shortest-path.html

https://www.reddit.com/r/learnprogramming/comments/3k3p78/the_dark_side_of_coding_bootcamps/

http://pythonprogramming.net/dashboard/#tab_dataanalysis

http://pythontips.com/2013/09/29/the-python-yield-keyword-explained/

http://www.alexkras.com/19-git-tips-for-everyday-use/

adding files to gitignore: http://www.tilcode.com/how-to-quickly-add-lines-to-gitignore-using-the-command-line/

create git branch and checkout that branch in 1 command: http://dropshado.ws/post/5421706761/git-create-and-checkout-new-branch

reference for multiple versions of python: http://linuxconfig.org/how-to-change-from-default-to-alternative-python-version-on-debian-linux

Why we use def meth(self, arg) instead of def meth(arg): http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html

Talking code podcast: http://pca.st/fthc

Metacircular Evaluator (from SICP), the 'soul' of the computer: https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html#%_sec_4.1 

Why learning programming is so hard (definitely going thru the desert of despair right now myself): http://www.vikingcodeschool.com/posts/why-learning-to-code-is-so-damn-hard

Complexity (computer science term): https://en.wikipedia.org/wiki/Programming_complexity

Gentle Intro To Complexity: http://discrete.gr/complexity/

Python - why do some functions start w/ "__": http://stackoverflow.com/questions/8689964/python-why-do-some-functions-have-underscores-before-and-after-the-function

De-duplicating python lists using set: http://www.dotnetperls.com/remove-duplicates-list-python

Python sorting lists of lists: http://jeffhoogland.blogspot.com/2013/06/python-sorting-lists-inside-of-lists.html

Lambda in Python creates anonymous functions: http://stackoverflow.com/questions/8966538/syntax-behind-sortedkey-lambda

second largest number in python: http://stackoverflow.com/questions/19697504/second-largest-number-in-list-python

Programming sucks; http://www.stilldrinking.org/programming-sucks

Advice from an old programmer: http://learnpythonthehardway.org/book/advice.html

Data Science tutorial: http://blog.brakmic.com/data-science-for-losers/

Learning strategies for programmers: http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/

Friendly Open Source projects should reserve specific issues for newbies: http://www.firsttimersonly.com/

MOOC Algorithms (in Java): https://www.reddit.com/r/cscareerquestions/comments/3p1t9o/how_do_coding_bootcamp_grads_get_hired/

Python objects and classes (visual guide): http://blog.lerner.co.il/pythons-objects-and-classes-a-visual-guide/

Python self Paramter (more info): http://www.programiz.com/article/python-self-why

People on Reddit talking about their frustrations with programming: https://www.reddit.com/r/AskReddit/comments/3p7ti1/what_are_you_terrible_at_but_enjoy_enough_to_keep/cw3wsak

Tiny bit of encouragement about people who started coding later in life: http://www.b-list.org/weblog/2015/oct/19/destroy-all-hiring-processes/

Tkinter create line: http://www.tkdocs.com/tutorial/canvas.html

Python Parser (argparse): https://docs.python.org/3/library/argparse.html

Python class tutorial: http://pythoncentral.io/introduction-to-python-classes/

Optimizing the League of Legends Codebase: http://engineering.riotgames.com/news/random-acts-optimization

Hackathon definition (participated in my first Hackathon today): https://en.wikipedia.org/wiki/Hackathon

xkcd comic on Git: http://xkcd.com/1597/

O notation (mathematical approximation on algorithm runtimes): https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/

Radix sort (sort by one places, etc): https://en.wikipedia.org/wiki/Radix_sort

Book I'm reading: The Pragmatic Programmer: https://pragprog.com/the-pragmatic-programmer/extracts/tips

Python countdown timer using Tkinter: ttp://stackoverflow.com/questions/10596988/making-a-countdown-timer-with-python-and-tkinter

Regex crossword: https://regexcrossword.com/

Python lambda functions: www.secnetix.de/olli/Python/lambda_functions.hawk
